name: "Deploy to Deno"
description:
  "Checks out the repository and publishes or deletes the project on Deno Deploy.
  If generateEnv is true, they will get published with the deployment environment as well."
inputs:
  action:
    description: "Action to perform: 'deploy' or 'delete' the project."
    required: true
    default: "deploy"
  token:
    description: "Deno token for publishing."
    required: true
  organization:
    description: The organization to target when deploying the project. If omitted, will default to the user account.
    required: false
  production:
    description: "Deploy to production (uses --prod flag)"
    required: false
    default: "true"
  entrypoint:
    description: "The entrypoint to the script that will be deployed."
    required: false
    default: "src/deno.ts"
  generateEnv:
    description: "Generates the .env file based on the current environment if true."
    required: false
    default: "true"
  project_name:
    description: "Overrides the auto-generated Deno Deploy project name."
    required: false
outputs: {}
runs:
  using: "composite"
  steps:
    - name: Setup Deno
      uses: denoland/setup-deno@v2
      with:
        deno-version: v2.x

    - name: Install CLI
      shell: bash
      run: deno install -gArf jsr:@deno/deployctl

    - name: Prepare Environment Variables
      shell: bash
      run: |
        if [ -n "${{ inputs.project_name }}" ]; then
          new_name="${{ inputs.project_name }}"
        else
          # Sanitize both project name and branch name to meet Deno Deploy requirements
          project_name=$(echo "${{ github.event.repository.name }}" | sed 's#[^a-zA-Z0-9]#-#g')
          branch_name=$(echo '${{ github.event.ref || github.event.workflow_run.head_branch || github.ref }}' | sed 's#refs/heads/##' | sed 's#[^a-zA-Z0-9]#-#g')
          new_name="${project_name}-${branch_name}"
        fi

        # Clean up the name to meet Deno Deploy requirements:
        # - Only a-z, 0-9, and - allowed
        # - Must not start or end with hyphen
        # - Cannot exceed 26 characters
        new_name=$(echo "$new_name" | sed 's#[^a-zA-Z0-9-]#-#g' | sed 's#^-*##' | sed 's#-*$##' | cut -c 1-26)

        # Ensure we don't end with a hyphen after truncation
        new_name=$(echo "$new_name" | sed 's#-*$##')

        # Ensure minimum length of 3 characters
        if [ ${#new_name} -lt 3 ]; then
          new_name="${new_name}app"
        fi

        echo "DENO_PROJECT_NAME=$new_name" >> $GITHUB_ENV
        DENO_DEPLOYMENT_ID=${{ github.sha }}
        echo "DENO_DEPLOYMENT_ID=$DENO_DEPLOYMENT_ID" >> $GITHUB_ENV

    # === DEPLOY STEPS ===
    - name: Generate .env File
      if: inputs.action == 'deploy' && inputs.generateEnv == 'true'
      shell: bash
      run: |
        cat > generate-env.ts <<'EOF'
        const envVars = Deno.env.toObject();
        const filtered = Object.entries(envVars)
          .filter(([k, v]) => !/^(GITHUB_|RUNNER_|CI|HOME|PATH|PWD|SHELL|LANG|LC_|TZ|ACTIONS_)/.test(k))
          .filter(([k, v]) => v !== undefined && v !== null && v.trim() !== "")
          .reduce((acc, [k,v]) => ({...acc, [k]:v}), {});
        await Deno.writeTextFile(".env",
          Object.entries(filtered)
            .map(([k,v]) => `${k}="${v.replace(/"/g, '\\"')}"`)
            .join("\n")
        );
        EOF
        deno run --allow-env --allow-write=.env generate-env.ts
        rm generate-env.ts

    - name: Manage Deno Deploy Project (Deploy)
      if: inputs.action == 'deploy'
      shell: bash
      id: deno_project
      env:
        DENO_DEPLOY_TOKEN: ${{ inputs.token }}
      run: |
        deployctl projects create \
          --token=$DENO_DEPLOY_TOKEN \
          --project=$DENO_PROJECT_NAME \
          --force \
          --color=never \
          ${{ inputs.organization && format('--org={0}', inputs.organization) || '' }} || true

        # Construct the deployment URL directly (Deno Deploy URLs follow predictable pattern)
        PROJECT_URL="https://${DENO_PROJECT_NAME}.deno.dev"

        echo "PROJECT_URL=$PROJECT_URL" >> $GITHUB_ENV
        echo "deployment_url=$PROJECT_URL" >> $GITHUB_OUTPUT

    - name: Update manifest.json with deployment URL
      if: inputs.action == 'deploy'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          const manifestPath = path.resolve("${{ github.workspace }}", './manifest.json');

          if (!fs.existsSync(manifestPath)) {
            console.log('manifest.json not found. Skipping update.');
            return;
          }

          const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));

          manifest["homepage_url"] = "${{ steps.deno_project.outputs.deployment_url }}";

          const updatedManifest = JSON.stringify(manifest, null, 2);
          fs.writeFileSync(manifestPath, updatedManifest);
          console.log('Updated manifest:', updatedManifest);

    - name: Deploy to Deno
      if: inputs.action == 'deploy'
      shell: bash
      env:
        DENO_DEPLOY_TOKEN: ${{ inputs.token }}
      run: |
        deployctl deploy \
          --token=$DENO_DEPLOY_TOKEN \
          --project=$DENO_PROJECT_NAME \
          --entrypoint=${{ inputs.entrypoint }} \
          ${{ inputs.generateEnv == 'true' && '--env-file=.env' || '' }} \
          ${{ inputs.production == 'true' && '--prod' || '' }}

    - name: Get GitHub App token
      if: inputs.action == 'deploy' && env.APP_ID != '' && env.APP_PRIVATE_KEY != ''
      uses: actions/create-github-app-token@v1
      id: app-token
      with:
        app-id: ${{ env.APP_ID }}
        private-key: ${{ env.APP_PRIVATE_KEY }}

    - name: Check if manifest.json exists
      id: check_manifest
      shell: bash
      run: |
        if [ -f manifest.json ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Format manifest using Prettier
      shell: bash
      if: inputs.action == 'deploy' && steps.check_manifest.outputs.exists == 'true'
      continue-on-error: true
      run: |
        npx prettier --write manifest.json

    - name: Commit file
      if: inputs.action == 'deploy' && steps.check_manifest.outputs.exists == 'true'
      uses: swinton/commit@v2.x
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token || env.GITHUB_TOKEN }}
      with:
        files: |
          manifest.json
        commit-message: "chore: [skip ci] update manifest.json url"
        ref: ${{ github.event.workflow_run.head_branch || github.ref }}

    - name: Write Deployment URL to Summary
      if: inputs.action == 'deploy'
      shell: bash
      run: |
        echo "### Deployment URL" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.deno_project.outputs.deployment_url }}" >> $GITHUB_STEP_SUMMARY

    # === DELETE STEP ===
    - name: Delete Deno Deploy Project
      if: inputs.action == 'delete'
      shell: bash
      env:
        DENO_DEPLOY_TOKEN: ${{ inputs.token }}
      run: |
        deployctl projects delete \
          --token=$DENO_DEPLOY_TOKEN \
          --project=$DENO_PROJECT_NAME \
          --force \
          --color=never || true

    - name: Write Deletion to Summary
      if: inputs.action == 'delete'
      shell: bash
      run: |
        echo "### Deployment URL" >> $GITHUB_STEP_SUMMARY
        echo "Deployment \`${DENO_PROJECT_NAME}\` has been deleted." >> $GITHUB_STEP_SUMMARY
